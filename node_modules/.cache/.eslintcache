[{"/Users/laurenwest/code/cs124/src/index.js":"1","/Users/laurenwest/code/cs124/src/App.js":"2","/Users/laurenwest/code/cs124/src/reportWebVitals.js":"3","/Users/laurenwest/code/cs124/src/Lists.js":"4","/Users/laurenwest/code/cs124/src/InMemoryApp.js":"5","/Users/laurenwest/code/cs124/src/MainPage.js":"6","/Users/laurenwest/code/cs124/src/Alert.js":"7"},{"size":552,"mtime":1633565906499,"results":"8","hashOfConfig":"9"},{"size":1150,"mtime":1634109954968,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1633565125370,"results":"11","hashOfConfig":"9"},{"size":3446,"mtime":1634257212188,"results":"12","hashOfConfig":"9"},{"size":848,"mtime":1634260296428,"results":"13","hashOfConfig":"9"},{"size":2381,"mtime":1634255005225,"results":"14","hashOfConfig":"9"},{"size":1101,"mtime":1634255150118,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ffiht0",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/laurenwest/code/cs124/src/index.js",[],"/Users/laurenwest/code/cs124/src/App.js",["33","34","35","36","37","38","39","40","41","42"],"import logo from './logo.svg';\nimport './App.css';\nimport './AlertApp.css';\nimport React, {useState} from \"react\";\nimport MainPage from './MainPage'\nimport Lists from \"./Lists\";\nimport DATA from \"./InMemoryApp\";\n\nfunction App() {\n    const [showAlert, setShowAlert] = useState(false);\n    const [showEditAlert, setShowEditAlert] = useState(false);\n    let [currentTask, setCurrentTask] = useState(\"\");\n    let [data, setData] = useState(DATA);\n    let [listId, setListId] = useState(0);\n    let [selectedPage, setPage] = useState({\n        type: \"home\"\n    })\n\n    const pageRenderLookup = {\n        \"home\": (\n                <MainPage setData={setData} data={data} onListClick={(n) => setPage({\n                    type: \"list\",\n                    selectedId: n\n                })}/>\n        ),\n        \"list\": (\n            <>\n                <img onClick={() => setPage({type: \"home\"})} src={\"long-arrow-alt-left-solid.svg\"} className={\"back-arrow\"}/>\n                <Lists setData={setData} data={data} list={data[selectedPage.selectedId]}/>\n            </>\n        )\n    }\n    return pageRenderLookup[selectedPage.type]\n}\n\nexport default App;\n","/Users/laurenwest/code/cs124/src/reportWebVitals.js",[],"/Users/laurenwest/code/cs124/src/Lists.js",["43","44","45","46","47","48","49"],"import \"./main.css\"\nimport {Data} from \"./InMemoryApp\"\nimport React, {useEffect, useState, useMemo} from \"react\";\nimport Alert from \"./Alert\";\n\nfunction ShowEditAlert(props) {\n    props.setCurrentTask(props.listitem.id)\n    props.setShowEditAlert(true)\n}\n\nfunction ListsItemDisplay(props){\n    const [checked, setChecked] = useState(props.listitem.completed)\n    const [showAlert, setShowAlert] = useState(false);\n\n    function handleAlertOKListItem(listItemText) {\n        console.log(listItemText)\n        props.listitem.text = listItemText;\n        props.setData(Object.assign([], props.data))\n    }\n    function handleDelete(e) {\n        e.stopPropagation()\n        props.list.listItems = props.list.listItems.filter((item) => item.id !== props.listitem.id)\n        props.setData(Object.assign([], props.data))\n    }\n\n    return (\n        <div id=\"box1\" className=\"boxes boxes-blue\">\n            <input checked={checked} type=\"checkbox\" onChange={() => {\n                props.listitem.completed = !props.listitem.completed\n                setChecked(props.listitem.completed)\n                props.setData(Object.assign([], props.data))\n            }}/>\n            <label>{props.listitem.text}</label><br/>\n            <div className={\"edit-delete-button-container\"}>\n            <img className=\"edit-delete-button\" onClick={() => setShowAlert(true)} src={\"edit-solid.svg\"}></img>\n            <img className=\"edit-delete-button\" onClick={handleDelete} src={\"times-solid.svg\"}></img>\n            </div>\n            <Alert visible={showAlert} inputValue={props.listitem.text} onClose={() => setShowAlert(false)} onOk={handleAlertOKListItem} cancelName={\"Don't Edit Task\"} okName={\"Edit Task\"}>\n                <div>Edit Task:</div>\n            </Alert>\n        </div>\n    )\n}\n\nfunction Lists(props)\n{\n    const [showAlert, setShowAlert] = useState(false);\n\n    function handleAlertOKListItem(listItemName) {\n        updateListItems([...props.list.listItems,\n            {\n                id: props.list.listItems.length,\n                text: listItemName,\n                completed: false\n            }\n        ]);\n    }\n    function updateListItems(newListItems){\n        props.setData(props.data.map(list => {\n            if (list.id === props.list.id) {\n                list.listItems = newListItems\n            }\n            return list;\n        }))\n    }\n    return (\n        <>\n            <h1>{props.list.title}</h1>\n            {\n                props.list.listItems\n                    .filter((x) => !x.completed)\n                    .map((y) => <ListsItemDisplay list={props.list} key={y.id} setData={props.setData} data={props.data} listitem={y}/>)}\n            <hr/>\n            <h3>Completed:</h3>\n            {\n            props.list.listItems\n                .filter((x) => x.completed)\n                .map((y) => <ListsItemDisplay list={props.list} key={y.id} setData={props.setData} data={props.data} listitem={y}/>)}\n            <div id=\"button1\">\n                <button onClick={() => {setShowAlert(true)}} className=\"addTask\">\n                    <img src=\"plus-solid.svg\"/>\n                    <span>Add Task</span>\n                </button>\n            </div>\n            <Alert visible={showAlert}  onClose={() => setShowAlert(false)} onOk={handleAlertOKListItem} cancelName={\"Don't Add Task\"} okName={\"Add Task\"}>\n                <div>Add Task:</div>\n            </Alert>\n        </>\n    )\n}\n\nexport default Lists;","/Users/laurenwest/code/cs124/src/InMemoryApp.js",[],"/Users/laurenwest/code/cs124/src/MainPage.js",["50","51","52","53"],"import './main.css'\nimport React, {useState} from \"react\";\nimport Alert from \"./Alert\";\n\nfunction ListsDisplay(props) {\n    const [showAlert, setShowAlert] = useState(false);\n    function handleAlertOK(listName) {\n        props.list.title = listName;\n        props.setData(Object.assign([], props.data))\n    }\n    function handleDelete(e) {\n        e.stopPropagation()\n        props.setData(props.data.filter((list) => list.id !== props.list.id))\n    }\n\n    return (\n        <>\n            <div onClick={() => props.onClick(props.list.id)} className=\"boxes\" id=\"list-box-1\">\n                <img src=\"list-solid.svg\"/>\n                <span>{props.list.title}</span>\n                <div className={\"edit-delete-button-container\"}>\n                    <img className=\"edit-delete-button\" onClick={(e) => {\n                        e.stopPropagation()\n                        setShowAlert(true)\n                    }} src={\"edit-solid.svg\"}/>\n                    <img className=\"edit-delete-button\" onClick={handleDelete} src={\"times-solid.svg\"}></img>\n                </div>\n\n            </div>\n            <Alert inputValue={props.list.title} visible={showAlert} onClose={() => setShowAlert(false)} onOk={handleAlertOK} cancelName={\"Don't Edit List\"} okName={\"Edit List\"}>\n                <div>Edit List:</div>\n            </Alert>\n        </>\n    )\n}\n\nfunction MainPage(props) {\n    const [showAlert, setShowAlert] = useState(false);\n\n    function handleAlertOK(listName) {\n        props.setData([...props.data, {\n                id: props.data.length,\n                title: listName,\n                listItems: []\n            }\n            ]\n        )\n    }\n\n    return (\n        <>\n            <h1 id=\"MyLists\">My Lists</h1>\n            {props.data.map((x) => <ListsDisplay setData={props.setData} data={props.data} list={x} onClick={props.onListClick}/>)}\n            <div id=\"button1\">\n                <button onClick={() => setShowAlert(true)} className=\"addList addTask\">\n                    <img src=\"plus-solid.svg\"/>\n                    <span>Add List</span>\n                </button>\n            </div>\n            <Alert inputValue={\"\"} visible={showAlert} onClose={() => setShowAlert(false)} onOk={handleAlertOK} cancelName={\"Don't Add List\"} okName={\"Add List\"}>\n                <div>Add List:</div>\n            </Alert>\n        </>\n    )\n}\n\nexport default MainPage;","/Users/laurenwest/code/cs124/src/Alert.js",[],{"ruleId":"54","severity":1,"message":"55","line":1,"column":8,"nodeType":"56","messageId":"57","endLine":1,"endColumn":12},{"ruleId":"54","severity":1,"message":"58","line":10,"column":12,"nodeType":"56","messageId":"57","endLine":10,"endColumn":21},{"ruleId":"54","severity":1,"message":"59","line":10,"column":23,"nodeType":"56","messageId":"57","endLine":10,"endColumn":35},{"ruleId":"54","severity":1,"message":"60","line":11,"column":12,"nodeType":"56","messageId":"57","endLine":11,"endColumn":25},{"ruleId":"54","severity":1,"message":"61","line":11,"column":27,"nodeType":"56","messageId":"57","endLine":11,"endColumn":43},{"ruleId":"54","severity":1,"message":"62","line":12,"column":10,"nodeType":"56","messageId":"57","endLine":12,"endColumn":21},{"ruleId":"54","severity":1,"message":"63","line":12,"column":23,"nodeType":"56","messageId":"57","endLine":12,"endColumn":37},{"ruleId":"54","severity":1,"message":"64","line":14,"column":10,"nodeType":"56","messageId":"57","endLine":14,"endColumn":16},{"ruleId":"54","severity":1,"message":"65","line":14,"column":18,"nodeType":"56","messageId":"57","endLine":14,"endColumn":27},{"ruleId":"66","severity":1,"message":"67","line":28,"column":17,"nodeType":"68","endLine":28,"endColumn":126},{"ruleId":"54","severity":1,"message":"69","line":2,"column":9,"nodeType":"56","messageId":"57","endLine":2,"endColumn":13},{"ruleId":"54","severity":1,"message":"70","line":3,"column":16,"nodeType":"56","messageId":"57","endLine":3,"endColumn":25},{"ruleId":"54","severity":1,"message":"71","line":3,"column":37,"nodeType":"56","messageId":"57","endLine":3,"endColumn":44},{"ruleId":"54","severity":1,"message":"72","line":6,"column":10,"nodeType":"56","messageId":"57","endLine":6,"endColumn":23},{"ruleId":"66","severity":1,"message":"67","line":35,"column":13,"nodeType":"68","endLine":35,"endColumn":107},{"ruleId":"66","severity":1,"message":"67","line":36,"column":13,"nodeType":"68","endLine":36,"endColumn":96},{"ruleId":"66","severity":1,"message":"67","line":81,"column":21,"nodeType":"68","endLine":81,"endColumn":48},{"ruleId":"66","severity":1,"message":"67","line":19,"column":17,"nodeType":"68","endLine":19,"endColumn":44},{"ruleId":"66","severity":1,"message":"67","line":22,"column":21,"nodeType":"68","endLine":25,"endColumn":48},{"ruleId":"66","severity":1,"message":"67","line":26,"column":21,"nodeType":"68","endLine":26,"endColumn":104},{"ruleId":"66","severity":1,"message":"67","line":56,"column":21,"nodeType":"68","endLine":56,"endColumn":48},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'showAlert' is assigned a value but never used.","'setShowAlert' is assigned a value but never used.","'showEditAlert' is assigned a value but never used.","'setShowEditAlert' is assigned a value but never used.","'currentTask' is assigned a value but never used.","'setCurrentTask' is assigned a value but never used.","'listId' is assigned a value but never used.","'setListId' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Data' is defined but never used.","'useEffect' is defined but never used.","'useMemo' is defined but never used.","'ShowEditAlert' is defined but never used."]